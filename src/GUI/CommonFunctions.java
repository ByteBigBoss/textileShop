/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import com.formdev.flatlaf.FlatDarkLaf;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.MySQL;

/**
 *
 * @author sandaruwan
 */
public class CommonFunctions extends javax.swing.JFrame {

    /**
     * Creates new form CommonFunctions
     */
    public CommonFunctions() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InsertOne = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        SingleSearchOne = new javax.swing.JButton();
        InsertTwo = new javax.swing.JButton();
        SingleSearchTwo = new javax.swing.JButton();
        MultipleSearch = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        SubQueryOne = new javax.swing.JButton();
        SubQueryTwo = new javax.swing.JButton();
        JoinQuery = new javax.swing.JButton();
        LIKEOne = new javax.swing.JButton();
        LIKETwo = new javax.swing.JButton();
        LIKEThree = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        OrderBy = new javax.swing.JButton();
        GroupBy = new javax.swing.JButton();
        Operators = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jComboBox1 = new javax.swing.JComboBox<>();
        LoadComboBoxData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        LoadTableData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InsertOne.setText("Database Insert");
        InsertOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertOneActionPerformed(evt);
            }
        });

        Update.setText("Database Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setText("Database Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        SingleSearchOne.setText("Database Search Single Row");
        SingleSearchOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleSearchOneActionPerformed(evt);
            }
        });

        InsertTwo.setText("Database Insert - 2");
        InsertTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertTwoActionPerformed(evt);
            }
        });

        SingleSearchTwo.setText("Database Search Single Row - 2");
        SingleSearchTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleSearchTwoActionPerformed(evt);
            }
        });

        MultipleSearch.setText("Database Search Multiple Rows");
        MultipleSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultipleSearchActionPerformed(evt);
            }
        });

        SubQueryOne.setText("Database Sub Query Search 1");
        SubQueryOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubQueryOneActionPerformed(evt);
            }
        });

        SubQueryTwo.setText("Database Sub Query Search 2");
        SubQueryTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubQueryTwoActionPerformed(evt);
            }
        });

        JoinQuery.setText("Database Join Query Search");
        JoinQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoinQueryActionPerformed(evt);
            }
        });

        LIKEOne.setText("Database LIKE Query Search 1");
        LIKEOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIKEOneActionPerformed(evt);
            }
        });

        LIKETwo.setText("Database LIKE Query Search 2");
        LIKETwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIKETwoActionPerformed(evt);
            }
        });

        LIKEThree.setText("Database LIKE Query Search 3");
        LIKEThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIKEThreeActionPerformed(evt);
            }
        });

        OrderBy.setText("Database ORDER BY Search");
        OrderBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderByActionPerformed(evt);
            }
        });

        GroupBy.setText("Database GROUP BY Search");
        GroupBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GroupByActionPerformed(evt);
            }
        });

        Operators.setText("Database Operators Search");
        Operators.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OperatorsActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        LoadComboBoxData.setText("Load Data");
        LoadComboBoxData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadComboBoxDataActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        LoadTableData.setText("Load Data");
        LoadTableData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadTableDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(OrderBy)
                                .addGap(18, 18, 18)
                                .addComponent(GroupBy, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Operators, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(InsertOne)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Update)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Delete))
                                    .addComponent(InsertTwo))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SingleSearchOne, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SingleSearchTwo)
                                    .addComponent(MultipleSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(LIKEThree)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(SubQueryTwo)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LIKETwo))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(SubQueryOne)
                                        .addGap(18, 18, 18)
                                        .addComponent(JoinQuery)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(LIKEOne)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadComboBoxData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(LoadTableData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InsertOne)
                    .addComponent(Update)
                    .addComponent(Delete)
                    .addComponent(SingleSearchOne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InsertTwo)
                    .addComponent(SingleSearchTwo))
                .addGap(12, 12, 12)
                .addComponent(MultipleSearch)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubQueryOne)
                    .addComponent(JoinQuery)
                    .addComponent(LIKEOne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SubQueryTwo)
                    .addComponent(LIKETwo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LIKEThree)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OrderBy)
                    .addComponent(GroupBy)
                    .addComponent(Operators))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LoadComboBoxData))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LoadTableData)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void InsertOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertOneActionPerformed
        try {
            // DATABASE INSERT
            MySQL.execute("INSERT INTO `user` VALUES('4','Sahan','Perera','0772222222','sahan','456','1','1')");
        } catch (Exception ex) {
            Logger.getLogger(CommonFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InsertOneActionPerformed

    private void InsertTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertTwoActionPerformed
        // DATABASE INSERT - 2
        try {
            MySQL.execute("INSERT INTO `user`(`fname`,`lname`,`mobile`,`username`,`password`,`status`,`user_type_id`) VALUES ('Sahan','Perera','0771112223','sahan','12345','1','1')");
        } catch (Exception ex) {
            Logger.getLogger(CommonFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_InsertTwoActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        try {
            // DATABASE UPDATE
            MySQL.execute("UPDATE `user` SET `password`='890', `username`='perera' WHERE `id`='4'");
        } catch (Exception ex) {
            Logger.getLogger(CommonFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        try {
            // DATABASE DELETE
            MySQL.execute("DELETE FROM `user` WHERE `id`='4'");
        } catch (Exception ex) {
            Logger.getLogger(CommonFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void SingleSearchOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleSearchOneActionPerformed
        try {
            // SEARCH
            //JDK 11 -> import java.sql.ResultSet;
            ResultSet resultset = MySQL.execute("SELECT * FROM `user`");

            //Read 1st Row
            resultset.next();

            //String fname = resultset.getString("fname");
            String fname = resultset.getString(2);

            System.out.println(fname);
        } catch (Exception ex) {
            Logger.getLogger(CommonFunctions.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_SingleSearchOneActionPerformed

    private void SingleSearchTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleSearchTwoActionPerformed
        //SEARCH SINGLE ROW
        //JDK 11 -> import java.sql.ResultSet;
        try {
            //Empty ResultSet
            ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `id`='4'");

            //Error -> Read 1st Row
//            resultset.next(); //Unsafe
//            String fname = resultset.getString("fname");
//            System.out.println(fname);
            if (resultset.next()) {//Safe
                String fname = resultset.getString("fname");
                System.out.println(fname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_SingleSearchTwoActionPerformed

    private void SubQueryOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubQueryOneActionPerformed
        // SUB QUERY SEARCH
        try {

//            ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `user_type_id`='1'");
            //id <- user_type <- `type`='Admin'
            //SELECT `id` FROM `user_type` WHERE `type`='Admin'
            ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `user_type_id` = (SELECT `id` FROM `user_type` WHERE `type`='Admin')");

            while (resultset.next()) {
                String fname = resultset.getString("fname");
                System.out.println(fname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SubQueryOneActionPerformed

    private void SubQueryTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubQueryTwoActionPerformed
        // SUB QUERY SEARCH - 2
        try {
            //ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `user_type_id` = '2' OR `user_type_id`='3'");//Unsafe            

            //id <- user_type `type`='User' OR `type`='Cashier'
            //SELECT `id` FROM `user_type` WHERE `type`='User' OR `type`='Cashier'
            ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `user_type_id` IN  (SELECT `id` FROM `user_type` WHERE `type`='User' OR `type`='Cashier')");//Safe

            while (resultset.next()) {
                String fname = resultset.getString("fname");
                System.out.println(fname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_SubQueryTwoActionPerformed

    private void MultipleSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultipleSearchActionPerformed
        // MULTIPLE SEARCH
        try {
            //Multiple rows
            ResultSet resultset = MySQL.execute("SELECT * FROM `user`");

            while (resultset.next()) {
                String fname = resultset.getString("fname");
                System.out.println(fname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_MultipleSearchActionPerformed

    private void JoinQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoinQueryActionPerformed
        // JOIN QUERY
        try {

//            ResultSet resultset = MySQL.execute("SELECT * FROM `user` WHERE `user_type_id` = (SELECT `id` FROM `user_type` WHERE `type`='Admin')");//Sub Query

            ResultSet resultset = MySQL.execute("SELECT * FROM `user` INNER JOIN `user_type` ON `user`.`user_type_id`=`user_type`.`id` WHERE `type`='Admin'");//Join Query

            while (resultset.next()) {
                String fname = resultset.getString("fname");
                System.out.println(fname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_JoinQueryActionPerformed

    private void LIKEOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIKEOneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LIKEOneActionPerformed

    private void LIKETwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIKETwoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LIKETwoActionPerformed

    private void LIKEThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIKEThreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LIKEThreeActionPerformed

    private void OrderByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderByActionPerformed

    private void GroupByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GroupByActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GroupByActionPerformed

    private void OperatorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OperatorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OperatorsActionPerformed

    private void LoadComboBoxDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadComboBoxDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LoadComboBoxDataActionPerformed

    private void LoadTableDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadTableDataActionPerformed
        // LOAD TABLE DATA
        try {
            
            ResultSet resultset = MySQL.execute("SELECT * FROM `user`");
            
            while(resultset.next()){
                
                String id = resultset.getString("id");                
                String fname = resultset.getString("fname");
                String lname = resultset.getString("lname");
                String mobile = resultset.getString("mobile");
                
                Vector vector = new Vector(); //Row
                vector.add(id);                
                vector.add(fname);
                vector.add(lname);
                vector.add(mobile);
              
            }
            
        } catch (Exception e) {
        e.printStackTrace();
        }
    }//GEN-LAST:event_LoadTableDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CommonFunctions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton GroupBy;
    private javax.swing.JButton InsertOne;
    private javax.swing.JButton InsertTwo;
    private javax.swing.JButton JoinQuery;
    private javax.swing.JButton LIKEOne;
    private javax.swing.JButton LIKEThree;
    private javax.swing.JButton LIKETwo;
    private javax.swing.JButton LoadComboBoxData;
    private javax.swing.JButton LoadTableData;
    private javax.swing.JButton MultipleSearch;
    private javax.swing.JButton Operators;
    private javax.swing.JButton OrderBy;
    private javax.swing.JButton SingleSearchOne;
    private javax.swing.JButton SingleSearchTwo;
    private javax.swing.JButton SubQueryOne;
    private javax.swing.JButton SubQueryTwo;
    private javax.swing.JButton Update;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
